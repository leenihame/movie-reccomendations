# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UKqE7PTonc3K8Ui6VsCownVeorraeqdu
"""

# AI-Driven Movie Recommendation System (Colab Version)
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# 1. Sample Movie Dataset
data = {
    'movieId': [1, 2, 3, 4, 5],
    'title': ['Toy Story (1995)', 'Jumanji (1995)', 'Grumpier Old Men (1995)',
              'Waiting to Exhale (1995)', 'Father of the Bride Part II (1995)'],
    'genres': ['Adventure|Animation|Children|Comedy|Fantasy',
               'Adventure|Children|Fantasy',
               'Comedy|Romance',
               'Comedy|Drama|Romance',
               'Comedy']
}

df = pd.DataFrame(data)

# 2. Preprocess Genre Data
df['genres'] = df['genres'].fillna('').str.replace('|', ' ', regex=False)

# 3. TF-IDF Vectorization
vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = vectorizer.fit_transform(df['genres'])

# 4. Similarity Calculation
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# 5. Recommendation Function
def get_recommendations(title, top_n=3):
    indices = pd.Series(df.index, index=df['title'])
    idx = indices.get(title, None)

    if idx is None:
        return f"Movie '{title}' not found in dataset."

    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]
    movie_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[movie_indices].tolist()

# 6. Test Example
movie_title = 'Toy Story (1995)'
recommendations = get_recommendations(movie_title)

print(f"Top recommendations for '{movie_title}':")
for i, rec in enumerate(recommendations, 1):
    print(f"{i}. {rec}")